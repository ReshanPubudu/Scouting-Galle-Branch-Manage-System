/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.ijse.scouthq.view;

import edu.ijse.scouthq.controller.ControllerFactory;
import edu.ijse.scouthq.controller.custom.CategoryController;
import edu.ijse.scouthq.controller.custom.CoreBadgeController;
import edu.ijse.scouthq.controller.custom.MemberController;
import edu.ijse.scouthq.controller.custom.MemberCoreUpdateController;
import edu.ijse.scouthq.controller.custom.MemberMeritUpdateController;
import edu.ijse.scouthq.controller.custom.MeritBadgeController;
import edu.ijse.scouthq.controller.custom.RegistrationCategoryController;
//import edu.ijse.scouthq.controller.custom.RoverController;
import edu.ijse.scouthq.controller.custom.SchoolController;
import edu.ijse.scouthq.controller.custom.TeacherController;
import edu.ijse.scouthq.dao.custom.impl.QueryDAOImpl;
import edu.ijse.scouthq.dto.CoreBadgeDTO;
import edu.ijse.scouthq.dto.MemberDTO;
import edu.ijse.scouthq.dto.MeritBadgeDTO;
import edu.ijse.scouthq.dto.QueryDTO;
import edu.ijse.scouthq.dto.RoverDTO;
import edu.ijse.scouthq.dto.SchoolDTO;
import edu.ijse.scouthq.dto.TeacherDTO;
import java.awt.Color;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Reshan Pubudu
 */
public class viewDetails extends javax.swing.JPanel {
    
    MemberController ctrlMember;
//    RoverController ctrlRover;
    TeacherController ctrlTeacher;
    SchoolController ctrlSchool;
    RegistrationCategoryController ctrlRegCat;
    CoreBadgeController ctrlCoreBadge;
    MeritBadgeController ctrlMeritBadge;
    MemberCoreUpdateController ctrlMemberCore;
    MemberMeritUpdateController ctrlMemberMerit;
    CategoryController ctrlCat;
    
    /**
     * Creates new form viewDetails
     */
    public viewDetails() {
        initComponents();
        ctrlMember = (MemberController) ControllerFactory.getInstance().getController(ControllerFactory.ControllerTypes.MEMBER);
//        ctrlRover = (RoverController) ControllerFactory.getInstance().getController(ControllerFactory.ControllerTypes.ROVER);
        ctrlTeacher = (TeacherController) ControllerFactory.getInstance().getController(ControllerFactory.ControllerTypes.TEACHER);
        ctrlSchool = (SchoolController) ControllerFactory.getInstance().getController(ControllerFactory.ControllerTypes.SCHOOL);
        ctrlRegCat = (RegistrationCategoryController) ControllerFactory.getInstance().getController(ControllerFactory.ControllerTypes.REGISTRATIONCATEGORY);
        ctrlCoreBadge = (CoreBadgeController) ControllerFactory.getInstance().getController(ControllerFactory.ControllerTypes.COREBADGE);
        ctrlMeritBadge = (MeritBadgeController) ControllerFactory.getInstance().getController(ControllerFactory.ControllerTypes.MERITBADGE);
        ctrlMemberCore = (MemberCoreUpdateController) ControllerFactory.getInstance().getController(ControllerFactory.ControllerTypes.MEMBERCOREUPDATE);
        ctrlMemberMerit = (MemberMeritUpdateController) ControllerFactory.getInstance().getController(ControllerFactory.ControllerTypes.MEMBERMERITUPDATE);
        ctrlCat = (CategoryController) ControllerFactory.getInstance().getController(ControllerFactory.ControllerTypes.CATEGORY);
        //assendingCmb. select wela tiyenna
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        viewDetailPane = new javax.swing.JPanel();
        headLbl = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        viewByCmb = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        assendingCmb = new javax.swing.JComboBox<>();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        viewTable = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();

        setOpaque(false);
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        viewDetailPane.setBackground(new java.awt.Color(255, 255, 255));
        viewDetailPane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        viewDetailPane.setOpaque(false);
        viewDetailPane.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                viewDetailPaneMouseClicked(evt);
            }
        });

        headLbl.setFont(new java.awt.Font("Times New Roman", 1, 30)); // NOI18N
        headLbl.setForeground(new java.awt.Color(0, 0, 255));
        headLbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jPanel1.setBackground(new java.awt.Color(170, 204, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel1.setText(" View by     :");

        viewByCmb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Cub Scouts", "Boy Scouts", "Girl Scouts", "Rover Scouts" }));
        viewByCmb.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                viewByCmbItemStateChanged(evt);
            }
        });
        viewByCmb.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                viewByCmbMouseClicked(evt);
            }
        });
        viewByCmb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewByCmbActionPerformed(evt);
            }
        });

        jLabel2.setText("As Assending   :");

        assendingCmb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Name", "Cub Scout Id", "Age" }));
        assendingCmb.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                assendingCmbItemStateChanged(evt);
            }
        });
        assendingCmb.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                assendingCmbMouseClicked(evt);
            }
        });
        assendingCmb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assendingCmbActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addComponent(viewByCmb, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addComponent(assendingCmb, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(viewByCmb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(assendingCmb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 153, 255)));
        jPanel2.setOpaque(false);

        jScrollPane1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jScrollPane1MouseClicked(evt);
            }
        });

        viewTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Name", "Date Of Birth", "Address", "School", "Telephon", "Registed Date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        viewTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                viewTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(viewTable);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1063, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 577, Short.MAX_VALUE)
                .addContainerGap())
        );

        jScrollPane1.getViewport().setBackground(Color.WHITE);

        javax.swing.GroupLayout viewDetailPaneLayout = new javax.swing.GroupLayout(viewDetailPane);
        viewDetailPane.setLayout(viewDetailPaneLayout);
        viewDetailPaneLayout.setHorizontalGroup(
            viewDetailPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(viewDetailPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(viewDetailPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(headLbl, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(18, Short.MAX_VALUE))
        );
        viewDetailPaneLayout.setVerticalGroup(
            viewDetailPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(viewDetailPaneLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(headLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        add(viewDetailPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, 720));

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/ijse/scouthq/image/winter-stripes-background11.jpg"))); // NOI18N
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1120, 720));
    }// </editor-fold>//GEN-END:initComponents

    private void assendingCmbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assendingCmbActionPerformed
        
    }//GEN-LAST:event_assendingCmbActionPerformed

    private void viewByCmbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewByCmbActionPerformed
        
    }//GEN-LAST:event_viewByCmbActionPerformed

    private void jScrollPane1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jScrollPane1MouseClicked
        //viewWhatPane.setVisible(false);
    }//GEN-LAST:event_jScrollPane1MouseClicked

    private void viewDetailPaneMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_viewDetailPaneMouseClicked
        //viewWhatPane.setVisible(false);
    }//GEN-LAST:event_viewDetailPaneMouseClicked

    private void viewByCmbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_viewByCmbMouseClicked

    }//GEN-LAST:event_viewByCmbMouseClicked

    private void assendingCmbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_assendingCmbMouseClicked
       
    }//GEN-LAST:event_assendingCmbMouseClicked

    private void viewTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_viewTableMouseClicked
        
    }//GEN-LAST:event_viewTableMouseClicked

    private void viewByCmbItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_viewByCmbItemStateChanged
        
        assendingLoad();
        updateTable();
        //viewTableLoad();
        //assendingCmb.requestFocus();
    }//GEN-LAST:event_viewByCmbItemStateChanged

    private void assendingCmbItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_assendingCmbItemStateChanged
        updateTable();
        //viewTableLoad();
    }//GEN-LAST:event_assendingCmbItemStateChanged
    
    public void loadWhat(String what){
        switch (what){
            
            case "Members" : {
                viewByCmb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Cub Scout", "Boy Scout", "Girl Scout", "Rover Scout" }));
                viewDetailPane.updateUI();
                tag = 1;
                assendingLoad();
                updateTable();
                break;
            }
            case "Schools" : {
                viewByCmb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All Schools"/*, "Cub Scout", "Boy Scout", "Girl Scout"*/ }));
                viewDetailPane.updateUI();
                tag = 2;
                assendingLoad();
                updateTable();
                break;
            }
            case "Teachers" : {
                viewByCmb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All Teachers"/*, "As School"*/ }));
                viewDetailPane.updateUI();
                tag = 3;
                assendingLoad();
                updateTable();
                break;
            }
            case "Badge" : {
                viewByCmb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Core Badge", "Merit Badge" }));
                viewDetailPane.updateUI();
                tag = 4;
                assendingLoad();
                updateTable();
                break;
            }
        }
    }
    
    public void assendingLoad(){
        String getSelect = (String) viewByCmb.getSelectedItem();
        if(tag == 1){
            if(getSelect.equals("Cub Scout")){
                assendingCmb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {  "Cub Scout Id", "Name"/*, "School"*/ }));
            }
            if(getSelect.equals("Boy Scout")){
                assendingCmb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {  "Boy Scout Id", "Name"/*, "School"*/}));
            }
            if(getSelect.equals("Girl Scout")){
                assendingCmb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Girl Scout Id", "Name"/*, "School"*/ }));
            }
            if(getSelect.equals("Rover Scout")){
                assendingCmb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Rover Scout Id", "Name"  }));
            }
        }
        if(tag == 2){
            //if(getSelect.equals("All Schools")){
                assendingCmb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "School Id", "Name"/*, "Started Date" */}));
            /*}
            if(getSelect.equals("Cub Scout")){
                assendingCmb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Name", "Boy Scout Id", "School" }));
            }
            if(getSelect.equals("Boy Scout")){
                assendingCmb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Name", "Girl Scout Id", "School" }));
            }
            if(getSelect.equals("Girl Scout")){
                assendingCmb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Name", "Girl Scout Id", "School" }));
            }*/
        }
        if(tag == 3){
            //if(getSelect.equals("All Teachers" )){
                assendingCmb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {  "Tearcher's Id", "Name"/*, "School", "Badge"*/ }));
            /*}
            if(getSelect.equals("As School")){
                assendingCmb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Name", "Boy Scout Id", "School" }));
            }*/
        }
        if(tag == 4){
            //if(getSelect.equals("Core Badge")){
                assendingCmb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Cub Scouts", "Scouts", "Rover Scouts" }));
//            }
//            if(getSelect.equals("Merit Badge")){
//                assendingCmb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Cub Scouts", "Scouts", "Rover Scouts" }));
//            }
        }
        //viewTableLoad();
    }
    
    private void updateTable(){
        String viewBy = (String) viewByCmb.getSelectedItem();
        String assBy = (String) assendingCmb.getSelectedItem();
        DefaultTableModel dtm = (DefaultTableModel)viewTable.getModel();
        String table = "";
        if(viewBy.equals("Cub Scout")){
            viewBy = "CSC01";
        }
        if(viewBy.equals("Boy Scout")){
            viewBy = "BSC01";
        }
        if(viewBy.equals("Girl Scout")){
            viewBy = "GSC01";
        }
        if(viewBy.equals("Rover Scout")){
            viewBy = "RSC01";
        }
            
        if(tag == 1){
            if(viewBy.equals("RSC01")){
                //table = "Rover";
                try {
                    Object[] a = { "Id", "Name", "Date Of Birth", "Address", "Telephon"};
                    //Object[] a = { "Id", "Name", "Date Of Birth", "Address", "Telephon","Joining Date"};
                    dtm.setColumnIdentifiers(a);
                    if (viewTable.getColumnModel().getColumnCount() > 0) {
                        viewTable.getColumnModel().getColumn(0).setPreferredWidth(20);
                        viewTable.getColumnModel().getColumn(1).setPreferredWidth(100);
                        viewTable.getColumnModel().getColumn(2).setPreferredWidth(50);
                        viewTable.getColumnModel().getColumn(3).setPreferredWidth(150);
                        viewTable.getColumnModel().getColumn(4).setPreferredWidth(50);
                        //viewTable.getColumnModel().getColumn(5).setPreferredWidth(50);
                    }
                    dtm.setRowCount(0);
                        //System.out.println(roverDTO1.getRegId());
                    /*    int j = 0;
                        for(int i = 0; i< dtm.getRowCount(); i++){
                            if(viewTable.equals(dtm.getValueAt(i, 0))){
                                j++;
                            }
                        }
                        if(j==0){
                            Object[] rowData = {
                                        roverDTO1.getRegId(),
                                        roverDTO1.getNameInit(),
                                        roverDTO1.getDateOfBirth(),
                                        roverDTO1.getAddress(),
                                        roverDTO1.getTp()};
                                    dtm.addRow(rowData);;
                        }
                    }*/
                    if(assBy.equals("Rover Scout Id")){
                        assBy = "regId";
                    }
                    if(assBy.equals("Name")){
                        assBy = "nameInit";
                    }
                    ArrayList<QueryDTO> quaryDTO = new QueryDAOImpl().getAll(viewBy, assBy);
                    for(QueryDTO quaryDTO1 : quaryDTO){
                        //System.out.println(viewTable.getRowCount()+""+roverDTO1);
                        int j =0;
                        for(int i =0; i< viewTable.getRowCount(); i++){
                            if(quaryDTO1.getRegId().equals(viewTable.getValueAt(i, 0))){
                                j=1;
                            }
                        }
                        if(j==0){
                            Object[] rowData = {
                                    quaryDTO1.getRegId(),
                                    quaryDTO1.getNameInit(),
                                    quaryDTO1.getDateOfBirth(),
                                    quaryDTO1.getAddress(),
                                    quaryDTO1.getTp()};
                            dtm.addRow(rowData);
                        }
                    }
                    viewDetailPane.updateUI();
                    
                } catch (SQLException ex) {
                    Logger.getLogger(viewDetails.class.getName()).log(Level.SEVERE, null, ex);
                }
            }else{
                if(assBy.equals("Cub Scout Id")||assBy.equals("Boy Scout Id")||assBy.equals("Girl Scout Id")){
                    assBy = "regId";
                }
                if(assBy.equals("Name")){
                    assBy = "nameInit";
                }
                try {
                    Object[] a = { "Id", "Name", "Date Of Birth", "Address", "School"};
                    //Object[] a = { "Id", "Name", "Date Of Birth", "Address", "Telephon", "School","Joining Date"};
                    dtm.setColumnIdentifiers(a);
                    if (viewTable.getColumnModel().getColumnCount() > 0) {
                        viewTable.getColumnModel().getColumn(0).setPreferredWidth(20);
                        viewTable.getColumnModel().getColumn(1).setPreferredWidth(150);
                        viewTable.getColumnModel().getColumn(2).setPreferredWidth(50);
                        viewTable.getColumnModel().getColumn(3).setPreferredWidth(200);
                        //viewTable.getColumnModel().getColumn(4).setPreferredWidth(50);
                        viewTable.getColumnModel().getColumn(4).setPreferredWidth(20);
                        //viewTable.getColumnModel().getColumn(6).setPreferredWidth(50);
                    }
                    dtm.setRowCount(0);
                    ArrayList<QueryDTO> queryDTOs = new QueryDAOImpl().getAll(viewBy, assBy);
                    for(QueryDTO queryDTO : queryDTOs){
                        int j =0;
                        for(int i =0; i< viewTable.getRowCount(); i++){
                            if(queryDTO.getNameInit().equals(viewTable.getValueAt(i, 1))){
                                j=1;
                            }
                        }
                        if(j==0){
                            Object[] rowData = {
                                queryDTO.getRegId(),
                                queryDTO.getNameInit(),
                                queryDTO.getDateOfBirth(),
                                queryDTO.getAddress(),
                                //roverDTO1.getTp(),
                                queryDTO.getSclId()};
                            dtm.addRow(rowData);
                        }
                    }
                    viewDetailPane.updateUI();
                } catch (SQLException ex) {
                    Logger.getLogger(viewDetails.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        if(tag == 2){
            try {
                
                Object[] a = {"Id", "Name", "Address", "Description","Telephon"/*, "Started Date"*/};
                dtm.setColumnIdentifiers(a);
                if (viewTable.getColumnModel().getColumnCount() > 0) {
                    viewTable.getColumnModel().getColumn(0).setPreferredWidth(20);
                    viewTable.getColumnModel().getColumn(1).setPreferredWidth(100);
                    viewTable.getColumnModel().getColumn(2).setPreferredWidth(150);
                    viewTable.getColumnModel().getColumn(3).setPreferredWidth(200);
                    viewTable.getColumnModel().getColumn(4).setPreferredWidth(50);
                    //viewTable.getColumnModel().getColumn(5).setPreferredWidth(50);
                }
                dtm.setRowCount(0);
                if(assBy.equals("School Id")){
                    assBy = "sclId";
                }
                if(assBy.equals("Name")){
                    assBy = "Name";
                }
                ArrayList<SchoolDTO> schoolDTOs = new QueryDAOImpl().schoolQry(assBy);
                for(SchoolDTO schoolDTO : schoolDTOs){
                    int j =0;
                    for(int i =0; i< viewTable.getRowCount(); i++){
                        if(schoolDTO.getSclId().equals(viewTable.getValueAt(i, 0))){
                            j=1;
                        }
                    }
                    if(j==0){
                        Object[] rowData = {
                            schoolDTO.getSclId(),
                            schoolDTO.getName(),
                            schoolDTO.getAddress(),
                            schoolDTO.getDescrption(),
                            schoolDTO.getTp()};
                            //schoolDTO.getStartedDate()};
                        dtm.addRow(rowData);
                    }
                }
                viewDetailPane.updateUI();
            } catch (SQLException ex) {
                Logger.getLogger(viewDetails.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if(tag == 3){
            try {
                Object[] a = {"Id", "Name", "Date Of Birth", "Address", "Telephon"/*,"Joining Date", "Working Schools"*/};
                dtm.setColumnIdentifiers(a);
                if (viewTable.getColumnModel().getColumnCount() > 0) {
                    viewTable.getColumnModel().getColumn(0).setPreferredWidth(20);
                    viewTable.getColumnModel().getColumn(1).setPreferredWidth(120);
                    viewTable.getColumnModel().getColumn(2).setPreferredWidth(50);
                    viewTable.getColumnModel().getColumn(3).setPreferredWidth(150);
                    viewTable.getColumnModel().getColumn(4).setPreferredWidth(50);
                    //viewTable.getColumnModel().getColumn(5).setPreferredWidth(50);
                }
                dtm.setRowCount(0);
                if(assBy.equals("Tearcher's Id")){
                    assBy = "tId";
                }
                if(assBy.equals("Name")){
                    assBy = "nameInit";
                }
                ArrayList<TeacherDTO> teacherDTOs = new QueryDAOImpl().teacherQry(assBy);
                for(TeacherDTO teacherDTO : teacherDTOs){
                    int j =0;
                    for(int i =0; i< viewTable.getRowCount(); i++){
                        if(teacherDTO.getTId().equals(viewTable.getValueAt(i, 0))){
                            j=1;
                        }
                    }
                    if(j==0){
                        Object[] rowData = {
                            teacherDTO.getTId(),
                            teacherDTO.getNameInit(),
                            teacherDTO.getDateOfBirth(),
                            teacherDTO.getAddress(),
                            teacherDTO.getTp()};
                            //schoolDTO.getStartedDate()};
                        dtm.addRow(rowData);
                    }
                }
                viewDetailPane.updateUI();
            } catch (SQLException ex) {
                Logger.getLogger(viewDetails.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if(tag == 4){
            if(assBy.equals("Cub Scouts")){
                assBy = "CSC01";
            }
            if(assBy.equals("Scouts")){
                assBy = "BSC01";
            }
            if(assBy.equals("Rover Scouts")){
                assBy = "RSC01";
            }
            if(viewBy.equals("Core Badge")){
                try {
                    Object[] a = {"Id", "Name", "Time Periode(Month)", "Description(Badge Sylabus)"};
                    dtm.setColumnIdentifiers(a);
                    if (viewTable.getColumnModel().getColumnCount() > 0) {
                        viewTable.getColumnModel().getColumn(0).setPreferredWidth(20);
                        viewTable.getColumnModel().getColumn(1).setPreferredWidth(100);
                        viewTable.getColumnModel().getColumn(2).setPreferredWidth(50);
                        viewTable.getColumnModel().getColumn(3).setPreferredWidth(600);
                    }
                    dtm.setRowCount(0);
                    
                    ArrayList<CoreBadgeDTO> coreBadgeDTOs = new QueryDAOImpl().coreBadgeQry(assBy);
                    for(CoreBadgeDTO coreBadgeDTO : coreBadgeDTOs){
                        int j =0;
                        for(int i =0; i< viewTable.getRowCount(); i++){
                            if(coreBadgeDTO.getBadgeId().equals(viewTable.getValueAt(i, 0))){
                                j=1;
                            }
                        }
                        if(j==0){
                            Object[] rowData = {
                                coreBadgeDTO.getBadgeId(),
                                coreBadgeDTO.getBadgeName(),
                                coreBadgeDTO.getTimePeriode(),
                                coreBadgeDTO.getDescription()};
                            //schoolDTO.getStartedDate()};
                            dtm.addRow(rowData);
                        }
                    }
                    viewDetailPane.updateUI();
                } catch (SQLException ex) {
                    Logger.getLogger(viewDetails.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            if(viewBy.equals("Merit Badge")){
                try {
                    Object[] a = {"Id", "Name", "Description(Badge Sylabus)"/*, "Teacher Id"*/};
                    dtm.setColumnIdentifiers(a);
                    if (viewTable.getColumnModel().getColumnCount() > 0) {
                        viewTable.getColumnModel().getColumn(0).setPreferredWidth(20);
                        viewTable.getColumnModel().getColumn(1).setPreferredWidth(100);
                        viewTable.getColumnModel().getColumn(2).setPreferredWidth(600);
                        //viewTable.getColumnModel().getColumn(3).setPreferredWidth(50);
                    }
                    dtm.setRowCount(0);
                    ArrayList<MeritBadgeDTO> meritBadgeDTOs = new QueryDAOImpl().meritBadgeQry(assBy);
                    for(MeritBadgeDTO meritBadgeDTO : meritBadgeDTOs){
                        int j =0;
                        for(int i =0; i< viewTable.getRowCount(); i++){
                            if(meritBadgeDTO.getBadgeId().equals(viewTable.getValueAt(i, 0))){
                                j=1;
                            }
                        }
                        if(j==0){
                            Object[] rowData = {
                                meritBadgeDTO.getBadgeId(),
                                meritBadgeDTO.getBadgeName(),
                                meritBadgeDTO.getDescription()
                                //schoolDTO.getStartedDate()};
                                };
                            dtm.addRow(rowData);
                        }
                    }
                    viewDetailPane.updateUI();
                } catch (SQLException ex) {
                    Logger.getLogger(viewDetails.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }
    
    private void deleteItem(){
        String viewBy = (String) viewByCmb.getSelectedItem();
        String assBy = (String) assendingCmb.getSelectedItem();
        DefaultTableModel dtm = (DefaultTableModel)viewTable.getModel();
        String table = "";
        if(viewBy.equals("Cub Scout")){
            viewBy = "CSC01";
        }
        if(viewBy.equals("Boy Scout")){
            viewBy = "BSC01";
        }
        if(viewBy.equals("Girl Scout")){
            viewBy = "GSC01";
        }
        if(viewBy.equals("Rover Scout")){
            viewBy = "RSC01";
        }
            
        if(tag == 1){
            if(viewBy.equals("RSC01")){
                try {
                    if(assBy.equals("Rover Scout Id")){
                        assBy = "rId";
                    }
                    if(assBy.equals("Name")){
                        assBy = "nameInit";
                    }
                    viewDetailPane.updateUI();
                } catch (Exception ex) {
                    Logger.getLogger(viewDetails.class.getName()).log(Level.SEVERE, null, ex);
                }
            }else{
                if(assBy.equals("Cub Scout Id")||assBy.equals("Boy Scout Id")||assBy.equals("Girl Scout Id")){
                    assBy = "regId";
                }
                if(assBy.equals("Name")){
                    assBy = "nameInit";
                }
                    viewDetailPane.updateUI();
            }
        }
        if(tag == 2){
            try {
                if(assBy.equals("School Id")){
                    assBy = "sclId";
                }
                if(assBy.equals("Name")){
                    assBy = "Name";
                }
                viewDetailPane.updateUI();
            } catch (Exception ex) {
                Logger.getLogger(viewDetails.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if(tag == 3){
            try {
                if(assBy.equals("Tearcher's Id")){
                    assBy = "tId";
                }
                if(assBy.equals("Name")){
                    assBy = "nameInit";
                }
                viewDetailPane.updateUI();
            } catch (Exception ex) {
                Logger.getLogger(viewDetails.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if(tag == 4){
            if(assBy.equals("Cub Scouts")){
                assBy = "CSC01";
            }
            if(assBy.equals("Scouts")){
                assBy = "BSC01";
            }
            if(assBy.equals("Rover Scouts")){
                assBy = "RSC01";
            }
            if(viewBy.equals("Core Badge")){
                
            }
            if(viewBy.equals("Merit Badge")){
                
            }
        }
    }
    
    private int tag;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> assendingCmb;
    public static javax.swing.JLabel headLbl;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JComboBox<String> viewByCmb;
    private javax.swing.JPanel viewDetailPane;
    private javax.swing.JTable viewTable;
    // End of variables declaration//GEN-END:variables
}
